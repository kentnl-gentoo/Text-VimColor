SCRIPT  /data/raptor/devel/projects/perl/Text-VimColor/share/mark.vim
Sourced 1 time
Total time:  12.491066
 Self time:  12.454882

count  total (s)   self (s)
                            " mark.vim - turn Vim syntax highlighting into an ad-hoc markup language that
                            " can be parsed by the Text::VimColor Perl module.
                            "
                            " Author: Geoff Richards <qef@laxan.com>
                            " Maintainer: Randy Stauner <rwstauner@cpan.org>
                            " Based loosely on 2html.vim, by Bram Moolenaar <Bram@vim.org>,
                            "   modified by David Ne\v{c}as (Yeti) <yeti@physics.muni.cz>.
                            
                            " TODO: try exe "set report=" . s:end
    1              0.000006 set report=1000000
                            
                            " For some reason (I'm sure it used to work) we now need to get Vim
                            " to make another attempt to detect the filetype if it wasn't set
                            " explicitly.
    1              0.000005 if !strlen(&filetype)
    1   0.000208   0.000004    filetype detect
    1              0.000002 endif
    1              0.000032 syn on
                            
                            " Set up the output buffer.
    1   0.000098   0.000097 new
    1              0.000003 set modifiable
    1              0.000002 set paste
                            
                            " Expand tabs. Without this they come out as '^I'.
    1              0.000027 set isprint+=9
                            
    1   0.000006   0.000004 wincmd p
    1              0.000006 let s:end = line("$")
                            
    1              0.000002 let s:collect = 1 "(version >= 700)
    1              0.000002 if s:collect
    1              0.000002   let s:lines = []
    1              0.000003   function Add (arr, str)
                                call add(a:arr, a:str)
                              endfunction
    1              0.000001 else
                              let s:lines = 1 " dummy value
                              wincmd p " move to mark window
                              " pre-fill window with the required number of lines so setline() will work
                              exe "normal " . (s:end - 1) . "o"
                              wincmd p
                              function Add (dum, str)
                                wincmd p
                                call setline(s:lnum, a:str)
                                wincmd p
                              endfunction
                            endif
                            
                            " Loop over all lines in the original text
    1              0.000002 let s:lnum = 1
 8101              0.010143 while s:lnum <= s:end
                            
                              " Get the current line
 8100              0.023646   let s:line = getline(s:lnum)
 8100              0.020717   let s:len = strlen(s:line)
 8100              0.011390   let s:new = ""
                            
                              " Loop over each character in the line
 8100              0.009883   let s:col = 1
26886              0.032828   while s:col <= s:len
25222              0.045831     let s:startcol = s:col " The start column for processing text
25222              9.578809     let s:id = synID(s:lnum, s:col, 1)
25222              0.082355     let s:col = s:col + 1
                                " Speed loop (it's small - that's the trick)
                                " Go along till we find a change in synID
706976              1.704203     while s:col <= s:len && s:id == synID(s:lnum, s:col, 1) | let s:col = s:col + 1 | endwhile
                            
                                " Output the text with the same synID, with class set to c{s:id}
25222              0.065743     let s:id = synIDtrans(s:id)
25222              0.077991     let s:name = synIDattr(s:id, 'name')
25222              0.386220     let s:new = s:new . '>' . s:name . '>' . substitute(substitute(substitute(strpart(s:line, s:startcol - 1, s:col - s:startcol), '&', '\&a', 'g'), '<', '\&l', 'g'), '>', '\&g', 'g') . '<' . s:name . '<'
                            
25222              0.037428     if s:col > s:len
 6436              0.005326       break
                                endif
18786              0.024977   endwhile
                            
                              " TODO: try if s:collect here
 8100   0.070218   0.037904   call Add(s:lines, s:new)
 8100              0.021493   let s:lnum = s:lnum + 1
 8100              0.007116 endwhile
                            
    1   0.000009   0.000008 wincmd p
                            
    1              0.000002 if s:collect
    1              0.001437   call setline(1, s:lines)
    1              0.000004 endif
    1              0.000470 unlet s:lines

FUNCTION  Add()
Called 8100 times
Total time:   0.032053
 Self time:   0.032053

count  total (s)   self (s)
 8100              0.025384     call add(a:arr, a:str)

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
 8100   0.032053             Add()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
 8100              0.032053  Add()


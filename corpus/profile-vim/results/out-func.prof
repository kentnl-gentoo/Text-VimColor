SCRIPT  /data/raptor/devel/projects/perl/Text-VimColor/share/mark.vim
Sourced 1 time
Total time:   0.030936
 Self time:   0.012931

count  total (s)   self (s)
                            " mark.vim - turn Vim syntax highlighting into an ad-hoc markup language that
                            " can be parsed by the Text::VimColor Perl module.
                            "
                            " Author: Geoff Richards <qef@laxan.com>
                            " Maintainer: Randy Stauner <rwstauner@cpan.org>
                            " Based loosely on 2html.vim, by Bram Moolenaar <Bram@vim.org>,
                            "   modified by David Ne\v{c}as (Yeti) <yeti@physics.muni.cz>.
                            
                            " TODO: try exe "set report=" . s:end
    1              0.000007 set report=1000000
                            
                            " For some reason (I'm sure it used to work) we now need to get Vim
                            " to make another attempt to detect the filetype if it wasn't set
                            " explicitly.
    1              0.000008 if !strlen(&filetype)
                               filetype detect
                            endif
    1              0.000046 syn on
                            
                            " Set up the output buffer.
    1   0.000282   0.000278 new
    1              0.000011 set modifiable
    1              0.000006 set paste
                            
                            " Expand tabs. Without this they come out as '^I'.
    1              0.000089 set isprint+=9
                            
    1   0.000022   0.000017 wincmd p
    1              0.000014 let s:end = line("$")
                            
    1              0.000004 let s:collect = 0 "(version >= 700)
    1              0.000003 if s:collect
                              let s:lines = []
                              function Add! (arr, str)
                                call add(a:arr, a:str)
                              endfunction
                            else
    1              0.000005   let s:lines = 1 " dummy value
    1   0.000006   0.000005   wincmd p " move to mark window
                              " pre-fill window with the required number of lines so setline() will work
    1              0.000188   exe "normal " . (s:end - 1) . "o"
    1   0.000014   0.000010   wincmd p
    1              0.000006   function Add (dum, str)
                                wincmd p
                                call setline(s:lnum, a:str)
                                wincmd p
                              endfunction
    1              0.000003 endif
                            
                            " Loop over all lines in the original text
    1              0.000006 let s:lnum = 1
   11              0.000051 while s:lnum <= s:end
                            
                              " Get the current line
   10              0.000085   let s:line = getline(s:lnum)
   10              0.000074   let s:len = strlen(s:line)
   10              0.000039   let s:new = ""
                            
                              " Loop over each character in the line
   10              0.000033   let s:col = 1
   33              0.000103   while s:col <= s:len
   31              0.000149     let s:startcol = s:col " The start column for processing text
   31              0.001384     let s:id = synID(s:lnum, s:col, 1)
   31              0.000238     let s:col = s:col + 1
                                " Speed loop (it's small - that's the trick)
                                " Go along till we find a change in synID
  910              0.006838     while s:col <= s:len && s:id == synID(s:lnum, s:col, 1) | let s:col = s:col + 1 | endwhile
                            
                                " Output the text with the same synID, with class set to c{s:id}
   31              0.000205     let s:id = synIDtrans(s:id)
   31              0.000253     let s:name = synIDattr(s:id, 'name')
   31              0.001222     let s:new = s:new . '>' . s:name . '>' . substitute(substitute(substitute(strpart(s:line, s:startcol - 1, s:col - s:startcol), '&', '\&a', 'g'), '<', '\&l', 'g'), '>', '\&g', 'g') . '<' . s:name . '<'
                            
   31              0.000152     if s:col > s:len
    8              0.000022       break
                                endif
   23              0.000045   endwhile
                            
                              " TODO: try if s:collect here
   10   0.000558   0.000182   call Add(s:lines, s:new)
   10              0.000082   let s:lnum = s:lnum + 1
   10              0.000025 endwhile
                            
    1   0.000003   0.000002 wincmd p
                            
    1              0.000002 if s:collect
                              call setline(1, s:lines)
                            endif
    1              0.000004 unlet s:lines

FUNCTION  Add()
Called 10 times
Total time:   0.000376
 Self time:   0.000330

count  total (s)   self (s)
   10   0.000105   0.000091     wincmd p
   10              0.000139     call setline(s:lnum, a:str)
   10   0.000098   0.000066     wincmd p

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   10   0.000376   0.000330  Add()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
   10   0.000376   0.000330  Add()

